# actions_out_of_context.py (MEJORADO)

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import EventType
import logging

from .models.model_manager import generate_text

logger = logging.getLogger(__name__)

class ActionHandleOutOfContext(Action):
    """
    Action para manejar mensajes fuera de contexto con mejor manejo del historial.
    """
    
    def name(self) -> str:
        return "action_handle_out_of_context"

    def _get_prompt_by_intent(
        self, 
        intent: str, 
        user_message: str, 
        historial_text: str
    ) -> str:
        """
        Genera el prompt apropiado seg√∫n el intent detectado.
        """
        
        base_personality = """
Eres un asistente virtual veterinario con personalidad amigable y cercana, 
como un perrito robot entusiasta. Usas lenguaje argentino natural y sos copado.
Tu objetivo es ayudar con productos veterinarios y agropecuarios.
"""

        # Instrucci√≥n cr√≠tica sobre historial
        historial_instruction = f"""
CONTEXTO CONVERSACIONAL (IMPORTANTE):
{historial_text}

‚ö†Ô∏è CRUCIAL: Revis√° el historial arriba. NO REPITAS lo que ya dijiste antes.
Si ya saludaste, no saludes de nuevo. Si ya preguntaste algo, no lo preguntes otra vez.
Gener√° una respuesta NUEVA que contin√∫e naturalmente la conversaci√≥n.
"""

        if intent == "off_topic":
            return f"""{base_personality}

El usuario est√° teniendo una conversaci√≥n casual que no est√° relacionada con productos 
veterinarios. Esta es una CONTINUACI√ìN de la charla, no el inicio.

{historial_instruction}

MENSAJE ACTUAL DEL USUARIO:
{user_message}

TU TAREA:
- Respond√© de forma amigable y breve al mensaje espec√≠fico del usuario
- Reconoc√© lo que te est√°n diciendo (no ignores su pregunta/comentario)
- Redirig√≠ sutilmente hacia productos veterinarios
- VARI√Å tu respuesta, no uses las mismas palabras del historial

Tono: Amigable, juguet√≥n, entusiasta (como un perrito)
Extensi√≥n: 1-2 oraciones cortas

Ejemplos de variaciones seg√∫n contexto:
- Si pregunt√≥ c√≥mo est√°s: "¬°Todo joya ac√°! Igual che, ¬ønecesit√°s algo para tus animales?"
- Si habla del clima: "¬°Posta! Igual, ¬øbusc√°s alg√∫n producto para tus mascotas?"
- Si habla de su d√≠a: "¬°Te entiendo! Che, ¬øte puedo ayudar con algo veterinario?"
- Si pregunta algo random: "¬°Jaja, buena pregunta! Igual, mi fuerte son los productos para animales. ¬øNecesit√°s algo?"

IMPORTANTE: 
- NO repitas frases del historial
- S√ç respond√© espec√≠ficamente a lo que te est√°n diciendo ahora
- Manten√© el flow natural de la conversaci√≥n

Respond√© como el bot (SOLO la respuesta, sin etiquetas):
"""

        elif intent == "out_of_scope":
            return f"""{base_personality}

El usuario est√° pidiendo ayuda con algo fuera de tu dominio (tecnolog√≠a, cocina, etc.).
Esta es una CONTINUACI√ìN de la conversaci√≥n.

{historial_instruction}

MENSAJE ACTUAL DEL USUARIO:
{user_message}

TU TAREA:
- Respond√© con amabilidad pero dej√° claro tu l√≠mite
- Reconoc√© su consulta espec√≠ficamente
- Ofrec√© alternativa (productos veterinarios)
- VARI√Å tu respuesta del historial

Tono: Amigable pero directo, disculp√°ndote
Extensi√≥n: 2-3 oraciones

Ejemplos seg√∫n el tipo de consulta:
- Tecnolog√≠a: "¬°Uh, eso no es lo m√≠o! Yo solo s√© de productos veterinarios. ¬øNecesit√°s algo para tus animales?"
- Cocina: "¬°Jaja, no soy chef! Mi expertise son productos para animales. ¬øTe ayudo con eso?"
- Salud humana: "Disculp√°, no puedo con temas m√©dicos humanos. ¬øQuer√©s ayuda con productos veterinarios?"
- Otros: "¬°Che, me encantar√≠a pero no soy experto en eso! Lo m√≠o son productos para mascotas. ¬øBusc√°s algo?"

IMPORTANTE:
- NO uses las mismas palabras del historial
- S√ç reconoc√© espec√≠ficamente qu√© est√°n pidiendo

Respond√© como el bot (SOLO la respuesta, sin etiquetas):
"""

        elif intent == "consulta_veterinaria_profesional":
            return f"""{base_personality}

‚ö†Ô∏è CONSULTA M√âDICA VETERINARIA - Requiere derivaci√≥n a profesional.

{historial_instruction}

MENSAJE ACTUAL DEL USUARIO:
{user_message}

TU TAREA:
1. Mostrar empat√≠a con la situaci√≥n espec√≠fica que describen
2. Ser FIRME sobre no poder dar consejo m√©dico
3. Derivar a veterinario profesional
4. Explicar por qu√© no pod√©s ayudar con esto

Tono: Emp√°tico pero serio y firme
Extensi√≥n: 3-4 oraciones

Detect√° el tipo de situaci√≥n:
- EMERGENCIA (sangre, convulsiones, no respira): M√°xima urgencia
- DIAGN√ìSTICO (qu√© enfermedad tiene): Necesita evaluaci√≥n profesional
- DOSIFICACI√ìN (cu√°nto le doy): Peligroso sin supervisi√≥n
- PROCEDIMIENTO (c√≥mo coso/opero): Requiere veterinario

Ejemplos seg√∫n urgencia:
- Emergencia: "¬°Che, esto es URGENTE! Necesit√°s ir a una veterinaria YA. No puedo darte consejos m√©dicos, ser√≠a peligroso. Por favor and√° ahora mismo."
- No urgente: "Entiendo tu preocupaci√≥n. Pero esto necesita que lo vea un veterinario profesional. No puedo darte diagn√≥sticos ni dosis sin evaluaci√≥n. Consult√° con un vet pronto."
- Dosificaci√≥n: "No puedo indicarte dosis, che. Cada animal es diferente y sin verlo es peligroso. Llam√° a tu veterinario para que te oriente."

IMPORTANTE:
- NUNCA sugieras productos como soluci√≥n
- SIEMPRE deriv√° a veterinario
- Vari√° tu respuesta del historial
- Ajust√° urgencia seg√∫n gravedad

Respond√© como el bot (SOLO la respuesta, sin etiquetas):
"""

        else:
            return f"""{base_personality}

{historial_instruction}

MENSAJE ACTUAL:
{user_message}

Respond√© de forma natural y amigable, continuando la conversaci√≥n.
NO repitas lo del historial. Gener√° algo nuevo.

Respond√© como el bot (SOLO la respuesta, sin etiquetas):
"""

    def _detect_emergency_keywords(self, message: str) -> bool:
        """
        Detecta palabras clave de emergencia veterinaria.
        """
        emergency_keywords = [
            "urgente", "ayuda", "socorro", "emergencia", "convulsion", 
            "sangra", "sangre", "no respira", "respira mal", "desmayo",
            "inconsciente", "envenen", "atropell", "mordida", "fractura",
            "vomita sangre", "tieso", "no se mueve", "no reacciona"
        ]
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in emergency_keywords)

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: dict
    ) -> list[EventType]:
        try:
            current_intent = tracker.latest_message.get("intent", {}).get("name", "")
            user_message = tracker.latest_message.get("text", "")

            # Historial m√°s extenso y formateado mejor
            events = tracker.events[-12:]  # Aumentado de 10 a 12
            historial = []
            for e in events:
                if e.get("event") == "user":
                    historial.append(f"Usuario: {e.get('text')}")
                elif e.get("event") == "bot" and e.get("text"):
                    historial.append(f"Bot: {e.get('text')}")
            
            historial_text = "\n".join(historial[-6:])  # √öltimos 6 mensajes
            
            # Si no hay historial, indicarlo
            if not historial_text.strip():
                historial_text = "(No hay conversaci√≥n previa - este es el primer mensaje)"

            # Obtener prompt seg√∫n intent
            prompt = self._get_prompt_by_intent(
                current_intent, 
                user_message, 
                historial_text
            )

            # üîπ Logging del prompt
            logger.info("----- Prompt enviado a modelo (OutOfContext) -----")
            logger.info(f"Intent: {current_intent}")
            logger.info(f"Historial incluido: {len(historial)} mensajes")
            logger.info(prompt)
            logger.info("--------------------------------------------------")

            # Par√°metros de generaci√≥n mejorados para m√°s creatividad
            max_tokens = 90 if current_intent == "consulta_veterinaria_profesional" else 70
            
            # Generar respuesta
            # NOTA: Si tu generate_text acepta m√°s par√°metros, agregalos as√≠:
            # respuesta = generate_text(
            #     prompt, 
            #     max_new_tokens=max_tokens,
            #     temperature=0.8,  # M√°s creatividad
            #     top_p=0.9,        # M√°s variedad
            #     repetition_penalty=1.2  # Penaliza repeticiones
            # )
            respuesta = generate_text(prompt, max_new_tokens=max_tokens)

            # Limpieza de respuesta
            respuesta = respuesta.strip()
            
            # Remover prefijos no deseados
            prefixes_to_remove = ["Bot:", "Usuario:", "@", "Respuesta:"]
            for prefix in prefixes_to_remove:
                if respuesta.startswith(prefix):
                    respuesta = respuesta[len(prefix):].strip()

            # Verificar si est√° repitiendo del historial
            if historial_text and respuesta in historial_text:
                logger.warning(f"‚ö†Ô∏è REPETICI√ìN DETECTADA: '{respuesta}'")
                logger.warning("Usando fallback para evitar repetici√≥n")
                respuesta = self._get_fallback_response(current_intent, user_message)

            # Validar longitud
            if len(respuesta) < 10:
                logger.warning("Respuesta muy corta, usando fallback")
                respuesta = self._get_fallback_response(current_intent, user_message)

            # üîπ Logging de la respuesta generada
            logger.info(f"Respuesta generada: {respuesta}")

            # Enviar respuesta
            if current_intent == "consulta_veterinaria_profesional":
                is_emergency = self._detect_emergency_keywords(user_message)
                
                dispatcher.utter_message(text=respuesta)
                
                if is_emergency:
                    dispatcher.utter_message(
                        text="üö® Record√° que esto puede ser grave. No demores la consulta.",
                        buttons=[
                            {
                                "title": "Buscar productos para cuidado posterior",
                                "payload": "/buscar_producto"
                            }
                        ]
                    )
                else:
                    dispatcher.utter_message(
                        text="Si despu√©s del veterinario necesit√°s productos para el tratamiento, decime y te ayudo.",
                        buttons=[
                            {
                                "title": "Ver productos veterinarios",
                                "payload": "/buscar_producto"
                            },
                            {
                                "title": "Ver ofertas disponibles",
                                "payload": "/buscar_oferta"
                            }
                        ]
                    )
            else:
                dispatcher.utter_message(text=respuesta)
                
                if current_intent == "off_topic":
                    dispatcher.utter_message(
                        buttons=[
                            {
                                "title": "Ver productos",
                                "payload": "/buscar_producto"
                            },
                            {
                                "title": "Ver ofertas",
                                "payload": "/buscar_oferta"
                            }
                        ]
                    )

        except Exception as e:
            logger.error(f"[ActionHandleOutOfContext] Error: {e}", exc_info=True)
            dispatcher.utter_message(
                text=self._get_fallback_response(
                    tracker.latest_message.get("intent", {}).get("name", ""),
                    tracker.latest_message.get("text", "")
                )
            )

        return []

    def _get_fallback_response(self, intent: str, user_message: str = "") -> str:
        """
        Respuestas fallback variadas para evitar repetici√≥n.
        """
        import random
        
        fallbacks = {
            "off_topic": [
                "¬°Che, qu√© buena onda! Pero yo estoy ac√° para ayudarte con productos veterinarios. ¬øNecesit√°s algo?",
                "¬°Jaja, copado! Igual, mi fuerte son los productos para animales. ¬øTe ayudo con eso?",
                "¬°Dale! Aunque mir√°, yo s√© un mont√≥n de productos para mascotas. ¬øBusc√°s algo?"
            ],
            "out_of_scope": [
                "¬°Uh, disculp√°! Eso no es lo m√≠o. Mi especialidad son productos para animales. ¬øTe puedo ayudar con eso?",
                "¬°Che, me encantar√≠a pero no soy experto en eso! Lo m√≠o son productos veterinarios. ¬øNecesit√°s algo?",
                "¬°Jaja, esa se me escapa! Yo solo s√© de productos para mascotas. ¬øQuer√©s ayuda con eso?"
            ],
            "consulta_veterinaria_profesional": [
                "Entiendo tu preocupaci√≥n, pero no puedo darte consejos m√©dicos. Por favor consult√° con un veterinario profesional lo antes posible.",
                "Che, veo que es algo serio. No puedo ayudarte con diagn√≥sticos ni tratamientos. Necesit√°s consultar con un vet urgente.",
                "Te entiendo, pero cualquier consejo m√©dico de mi parte ser√≠a peligroso. Por favor and√° a una veterinaria ya."
            ]
        }
        
        # Seleccionar respuesta aleatoria del grupo
        responses = fallbacks.get(intent, ["¬øEn qu√© puedo ayudarte con productos veterinarios?"])
        return random.choice(responses)