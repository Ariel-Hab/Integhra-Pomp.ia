{
  "timestamp": "2025-09-03T11:17:03.898612",
  "base_dir": "C:\\Ariel\\integhra\\pomp.ia",
  "file_structure": {
    "num_files": 8,
    "num_dirs": 5,
    "files": [
      ".dockerignore",
      ".gitignore",
      "docker-compose.yml",
      "Dockerfile",
      "poetry.lock",
      "project_context.json",
      "pyproject.toml",
      "README.md"
    ],
    "dirs": {
      ".vscode": {
        "num_files": 1,
        "num_dirs": 0,
        "files": [
          "settings.json"
        ],
        "dirs": {}
      },
      "actions": {
        "num_files": 12,
        "num_dirs": 0,
        "files": [
          "actions_busqueda.py",
          "actions_confneg.py",
          "actions_context_validation.py",
          "actions_despedida.py",
          "actions_fallback.py",
          "actions_generica.py",
          "actions_smalltalk.py",
          "config.py",
          "conversation_state.py",
          "helpers.py",
          "lookup_loader.py",
          "__init__.py"
        ],
        "dirs": {}
      },
      "bot": {
        "num_files": 6,
        "num_dirs": 4,
        "files": [
          "config.yml",
          "domain.yml",
          "endpoints.yml",
          "logging.yml",
          "main.py",
          "rasa_project_files.json"
        ],
        "dirs": {
          ".rasa": {
            "num_files": 0,
            "num_dirs": 1,
            "files": [],
            "dirs": {
              "cache": {
                "num_files": 1,
                "num_dirs": 206,
                "files": [
                  "cache.db"
                ],
                "dirs": {
                  "tmp01uqb7ss": {
                    "note": "max depth reached"
                  },
                  "tmp03jx8s2h": {
                    "note": "max depth reached"
                  },
                  "tmp03oxwmv0": {
                    "note": "max depth reached"
                  },
                  "tmp05j_b8zu": {
                    "note": "max depth reached"
                  },
                  "tmp06iydxx7": {
                    "note": "max depth reached"
                  },
                  "tmp0g2o9xvu": {
                    "note": "max depth reached"
                  },
                  "tmp0t_ri0ao": {
                    "note": "max depth reached"
                  },
                  "tmp0xlorsxh": {
                    "note": "max depth reached"
                  },
                  "tmp1fb3fq7z": {
                    "note": "max depth reached"
                  },
                  "tmp1jukvtb_": {
                    "note": "max depth reached"
                  },
                  "tmp1ojou5hz": {
                    "note": "max depth reached"
                  },
                  "tmp1puw1pel": {
                    "note": "max depth reached"
                  },
                  "tmp1vd7kbrw": {
                    "note": "max depth reached"
                  },
                  "tmp27j6yd8i": {
                    "note": "max depth reached"
                  },
                  "tmp2c3qhiab": {
                    "note": "max depth reached"
                  },
                  "tmp2dxngm3y": {
                    "note": "max depth reached"
                  },
                  "tmp2j955h8g": {
                    "note": "max depth reached"
                  },
                  "tmp2z332r5p": {
                    "note": "max depth reached"
                  },
                  "tmp38xyqu3v": {
                    "note": "max depth reached"
                  },
                  "tmp3dv1eu3t": {
                    "note": "max depth reached"
                  },
                  "tmp3f3ttkdx": {
                    "note": "max depth reached"
                  },
                  "tmp3grqrd2c": {
                    "note": "max depth reached"
                  },
                  "tmp435csnyl": {
                    "note": "max depth reached"
                  },
                  "tmp44ioa85d": {
                    "note": "max depth reached"
                  },
                  "tmp4505lvwe": {
                    "note": "max depth reached"
                  },
                  "tmp46egi56l": {
                    "note": "max depth reached"
                  },
                  "tmp4cvvgney": {
                    "note": "max depth reached"
                  },
                  "tmp4dd_tdsx": {
                    "note": "max depth reached"
                  },
                  "tmp4ef_voy6": {
                    "note": "max depth reached"
                  },
                  "tmp4ix5mdyb": {
                    "note": "max depth reached"
                  },
                  "tmp4izb8vg6": {
                    "note": "max depth reached"
                  },
                  "tmp4u6bbp21": {
                    "note": "max depth reached"
                  },
                  "tmp508bol0e": {
                    "note": "max depth reached"
                  },
                  "tmp553istqu": {
                    "note": "max depth reached"
                  },
                  "tmp58ee5aeo": {
                    "note": "max depth reached"
                  },
                  "tmp5drsc5im": {
                    "note": "max depth reached"
                  },
                  "tmp5kdt8il8": {
                    "note": "max depth reached"
                  },
                  "tmp5vv73_nv": {
                    "note": "max depth reached"
                  },
                  "tmp64tm1tde": {
                    "note": "max depth reached"
                  },
                  "tmp6nypwg98": {
                    "note": "max depth reached"
                  },
                  "tmp73q26mck": {
                    "note": "max depth reached"
                  },
                  "tmp7gvrtbf1": {
                    "note": "max depth reached"
                  },
                  "tmp7nzlyaj0": {
                    "note": "max depth reached"
                  },
                  "tmp7p75rz3q": {
                    "note": "max depth reached"
                  },
                  "tmp89sbbh1b": {
                    "note": "max depth reached"
                  },
                  "tmp8a98ks0h": {
                    "note": "max depth reached"
                  },
                  "tmp8i30yj8m": {
                    "note": "max depth reached"
                  },
                  "tmp8k7or76d": {
                    "note": "max depth reached"
                  },
                  "tmp8uivh2ke": {
                    "note": "max depth reached"
                  },
                  "tmp8w16t4bz": {
                    "note": "max depth reached"
                  },
                  "tmp99tirbpy": {
                    "note": "max depth reached"
                  },
                  "tmp9bh7kcic": {
                    "note": "max depth reached"
                  },
                  "tmp9rjhlqyz": {
                    "note": "max depth reached"
                  },
                  "tmp9s9aei_7": {
                    "note": "max depth reached"
                  },
                  "tmp9ul_kkqt": {
                    "note": "max depth reached"
                  },
                  "tmp9vklyzi_": {
                    "note": "max depth reached"
                  },
                  "tmp9vo8kcgh": {
                    "note": "max depth reached"
                  },
                  "tmpa41erufa": {
                    "note": "max depth reached"
                  },
                  "tmpa7duvdev": {
                    "note": "max depth reached"
                  },
                  "tmpaa38yale": {
                    "note": "max depth reached"
                  },
                  "tmpao76k7bz": {
                    "note": "max depth reached"
                  },
                  "tmpb1u3wnpb": {
                    "note": "max depth reached"
                  },
                  "tmpbfa2l8eo": {
                    "note": "max depth reached"
                  },
                  "tmpbrbm43rd": {
                    "note": "max depth reached"
                  },
                  "tmpbspop9to": {
                    "note": "max depth reached"
                  },
                  "tmpbtv5ptpr": {
                    "note": "max depth reached"
                  },
                  "tmpcexhak6i": {
                    "note": "max depth reached"
                  },
                  "tmpcisdwf3u": {
                    "note": "max depth reached"
                  },
                  "tmpcrh6ho9w": {
                    "note": "max depth reached"
                  },
                  "tmpcuzvni94": {
                    "note": "max depth reached"
                  },
                  "tmpcvciz9hz": {
                    "note": "max depth reached"
                  },
                  "tmpc_9nj0a2": {
                    "note": "max depth reached"
                  },
                  "tmpd2kip4xg": {
                    "note": "max depth reached"
                  },
                  "tmpd48ut_mo": {
                    "note": "max depth reached"
                  },
                  "tmpd4nk15lw": {
                    "note": "max depth reached"
                  },
                  "tmpdhged1u3": {
                    "note": "max depth reached"
                  },
                  "tmpdrvkpg52": {
                    "note": "max depth reached"
                  },
                  "tmpdskf9wpv": {
                    "note": "max depth reached"
                  },
                  "tmpd_4jcg8j": {
                    "note": "max depth reached"
                  },
                  "tmpe2461qf3": {
                    "note": "max depth reached"
                  },
                  "tmpe5alq2yj": {
                    "note": "max depth reached"
                  },
                  "tmpefrvruif": {
                    "note": "max depth reached"
                  },
                  "tmpejs5dui2": {
                    "note": "max depth reached"
                  },
                  "tmpeqcv2gb8": {
                    "note": "max depth reached"
                  },
                  "tmpet10sw6h": {
                    "note": "max depth reached"
                  },
                  "tmpexhzczco": {
                    "note": "max depth reached"
                  },
                  "tmpe_s53zpm": {
                    "note": "max depth reached"
                  },
                  "tmpfy5qemd3": {
                    "note": "max depth reached"
                  },
                  "tmpg06pnbjg": {
                    "note": "max depth reached"
                  },
                  "tmpg5hh7cmr": {
                    "note": "max depth reached"
                  },
                  "tmpg6626qo3": {
                    "note": "max depth reached"
                  },
                  "tmpgc4_hoxo": {
                    "note": "max depth reached"
                  },
                  "tmpgejypufe": {
                    "note": "max depth reached"
                  },
                  "tmpgknegibc": {
                    "note": "max depth reached"
                  },
                  "tmpgpogycq1": {
                    "note": "max depth reached"
                  },
                  "tmpgr84ukzv": {
                    "note": "max depth reached"
                  },
                  "tmpgrhxm8kl": {
                    "note": "max depth reached"
                  },
                  "tmpgt0hbez9": {
                    "note": "max depth reached"
                  },
                  "tmpgy84o5cl": {
                    "note": "max depth reached"
                  },
                  "tmph8w0nkhy": {
                    "note": "max depth reached"
                  },
                  "tmphec171ph": {
                    "note": "max depth reached"
                  },
                  "tmphf6nqhto": {
                    "note": "max depth reached"
                  },
                  "tmphip41khx": {
                    "note": "max depth reached"
                  },
                  "tmphmv83m98": {
                    "note": "max depth reached"
                  },
                  "tmphnqwdk2o": {
                    "note": "max depth reached"
                  },
                  "tmphrsddklq": {
                    "note": "max depth reached"
                  },
                  "tmph_ugg3lz": {
                    "note": "max depth reached"
                  },
                  "tmpi5zh2umq": {
                    "note": "max depth reached"
                  },
                  "tmpiclxau1u": {
                    "note": "max depth reached"
                  },
                  "tmpiiv5a51f": {
                    "note": "max depth reached"
                  },
                  "tmpiulggomu": {
                    "note": "max depth reached"
                  },
                  "tmpj67kdi2t": {
                    "note": "max depth reached"
                  },
                  "tmpj6rnrvnp": {
                    "note": "max depth reached"
                  },
                  "tmpj7gqvk7y": {
                    "note": "max depth reached"
                  },
                  "tmpj7tdygjw": {
                    "note": "max depth reached"
                  },
                  "tmpjtzmrxpc": {
                    "note": "max depth reached"
                  },
                  "tmpk584gif_": {
                    "note": "max depth reached"
                  },
                  "tmpk7u_5wwo": {
                    "note": "max depth reached"
                  },
                  "tmpkb2hw6ub": {
                    "note": "max depth reached"
                  },
                  "tmpkhqppyyr": {
                    "note": "max depth reached"
                  },
                  "tmpkkko2nv3": {
                    "note": "max depth reached"
                  },
                  "tmpkkz0b1ah": {
                    "note": "max depth reached"
                  },
                  "tmpkmdk9yk0": {
                    "note": "max depth reached"
                  },
                  "tmpksouj7x7": {
                    "note": "max depth reached"
                  },
                  "tmpl208lz78": {
                    "note": "max depth reached"
                  },
                  "tmplhayk8kz": {
                    "note": "max depth reached"
                  },
                  "tmplji267l2": {
                    "note": "max depth reached"
                  },
                  "tmplm2frk_o": {
                    "note": "max depth reached"
                  },
                  "tmplttas2fe": {
                    "note": "max depth reached"
                  },
                  "tmpm1x_09m_": {
                    "note": "max depth reached"
                  },
                  "tmpm34fgb10": {
                    "note": "max depth reached"
                  },
                  "tmpm4rhnwzm": {
                    "note": "max depth reached"
                  },
                  "tmpm5338i93": {
                    "note": "max depth reached"
                  },
                  "tmpm5l21bor": {
                    "note": "max depth reached"
                  },
                  "tmpmag7tzho": {
                    "note": "max depth reached"
                  },
                  "tmpmdbaacj4": {
                    "note": "max depth reached"
                  },
                  "tmpmifqd22b": {
                    "note": "max depth reached"
                  },
                  "tmpmp_c_6q4": {
                    "note": "max depth reached"
                  },
                  "tmpmrourzns": {
                    "note": "max depth reached"
                  },
                  "tmpmwkyt2dq": {
                    "note": "max depth reached"
                  },
                  "tmpn83nkjep": {
                    "note": "max depth reached"
                  },
                  "tmpncl68x0n": {
                    "note": "max depth reached"
                  },
                  "tmpnfh37kw1": {
                    "note": "max depth reached"
                  },
                  "tmpnj8_51sn": {
                    "note": "max depth reached"
                  },
                  "tmpnljm2733": {
                    "note": "max depth reached"
                  },
                  "tmpnt4x3kf2": {
                    "note": "max depth reached"
                  },
                  "tmpohuk0lex": {
                    "note": "max depth reached"
                  },
                  "tmpoogmaq7y": {
                    "note": "max depth reached"
                  },
                  "tmpoyvok7o0": {
                    "note": "max depth reached"
                  },
                  "tmpoyzz1oqf": {
                    "note": "max depth reached"
                  },
                  "tmpp8w3s4tk": {
                    "note": "max depth reached"
                  },
                  "tmppeula4rh": {
                    "note": "max depth reached"
                  },
                  "tmpptfvxxr5": {
                    "note": "max depth reached"
                  },
                  "tmppxcvf9wx": {
                    "note": "max depth reached"
                  },
                  "tmppyr16a3e": {
                    "note": "max depth reached"
                  },
                  "tmpq0axxi2r": {
                    "note": "max depth reached"
                  },
                  "tmpqeo08mi2": {
                    "note": "max depth reached"
                  },
                  "tmpqfk5frt5": {
                    "note": "max depth reached"
                  },
                  "tmpqg9ot2_1": {
                    "note": "max depth reached"
                  },
                  "tmpqv3ryz9_": {
                    "note": "max depth reached"
                  },
                  "tmpqwzbo_qf": {
                    "note": "max depth reached"
                  },
                  "tmpq_oa7egc": {
                    "note": "max depth reached"
                  },
                  "tmpr2ocucn3": {
                    "note": "max depth reached"
                  },
                  "tmprd5jqqp6": {
                    "note": "max depth reached"
                  },
                  "tmprssjosrv": {
                    "note": "max depth reached"
                  },
                  "tmps0gcmdnf": {
                    "note": "max depth reached"
                  },
                  "tmpsfv2ub1a": {
                    "note": "max depth reached"
                  },
                  "tmps_5d0s27": {
                    "note": "max depth reached"
                  },
                  "tmpt16l532k": {
                    "note": "max depth reached"
                  },
                  "tmptenqxw3_": {
                    "note": "max depth reached"
                  },
                  "tmptf7ufnui": {
                    "note": "max depth reached"
                  },
                  "tmptff9lyp3": {
                    "note": "max depth reached"
                  },
                  "tmptglrt_73": {
                    "note": "max depth reached"
                  },
                  "tmptxdj5_c4": {
                    "note": "max depth reached"
                  },
                  "tmpu0vdcnug": {
                    "note": "max depth reached"
                  },
                  "tmpuc0zazt4": {
                    "note": "max depth reached"
                  },
                  "tmpuuxbydxd": {
                    "note": "max depth reached"
                  },
                  "tmpv5705jz2": {
                    "note": "max depth reached"
                  },
                  "tmpv5odw_wd": {
                    "note": "max depth reached"
                  },
                  "tmpvrl0nrwu": {
                    "note": "max depth reached"
                  },
                  "tmpvse8ts_k": {
                    "note": "max depth reached"
                  },
                  "tmpv_t3uwmb": {
                    "note": "max depth reached"
                  },
                  "tmpw5zlf93m": {
                    "note": "max depth reached"
                  },
                  "tmpwa4b037s": {
                    "note": "max depth reached"
                  },
                  "tmpwajfhmw7": {
                    "note": "max depth reached"
                  },
                  "tmpwc0_82np": {
                    "note": "max depth reached"
                  },
                  "tmpwtt8_wk2": {
                    "note": "max depth reached"
                  },
                  "tmpwwzimmwb": {
                    "note": "max depth reached"
                  },
                  "tmpw_kumifm": {
                    "note": "max depth reached"
                  },
                  "tmpx0p9welf": {
                    "note": "max depth reached"
                  },
                  "tmpxo237ncb": {
                    "note": "max depth reached"
                  },
                  "tmpxxfkx_pi": {
                    "note": "max depth reached"
                  },
                  "tmpxy3lkn_5": {
                    "note": "max depth reached"
                  },
                  "tmpybjo2j6c": {
                    "note": "max depth reached"
                  },
                  "tmpyj4b7hbd": {
                    "note": "max depth reached"
                  },
                  "tmpyx9ypx6w": {
                    "note": "max depth reached"
                  },
                  "tmpz1rbni30": {
                    "note": "max depth reached"
                  },
                  "tmpz2znbxbl": {
                    "note": "max depth reached"
                  },
                  "tmpzavjo0ur": {
                    "note": "max depth reached"
                  },
                  "tmpze537gd4": {
                    "note": "max depth reached"
                  },
                  "tmpze9ak3us": {
                    "note": "max depth reached"
                  },
                  "tmpzrmy987a": {
                    "note": "max depth reached"
                  },
                  "tmpzzfmjqx4": {
                    "note": "max depth reached"
                  },
                  "tmp_bq4nvel": {
                    "note": "max depth reached"
                  },
                  "tmp_dm3nk9s": {
                    "note": "max depth reached"
                  },
                  "tmp_ocsjqyf": {
                    "note": "max depth reached"
                  }
                }
              }
            }
          },
          "data": {
            "num_files": 15,
            "num_dirs": 1,
            "files": [
              "categoria_lookup.csv",
              "category.csv",
              "compuesto_lookup.csv",
              "enterprise.csv",
              "lookup_tables.yml",
              "nlu.yml",
              "offer.csv",
              "offer_product.csv",
              "product.csv",
              "producto_lookup.csv",
              "proveedor_lookup.csv",
              "regex_entities.yml",
              "rules.yml",
              "stories.yml",
              "synonyms.yml"
            ],
            "dirs": {
              "regex": {
                "num_files": 2,
                "num_dirs": 0,
                "files": [
                  "fecha.txt",
                  "moneda.txt"
                ],
                "dirs": {}
              }
            }
          },
          "entrenador": {
            "num_files": 4,
            "num_dirs": 1,
            "files": [
              "exporter.py",
              "importer.py",
              "train.py",
              "utils.py"
            ],
            "dirs": {
              "data_generator": {
                "num_files": 3,
                "num_dirs": 0,
                "files": [
                  "domain_generator.py",
                  "nlu_generator.py",
                  "stories_generator.py"
                ],
                "dirs": {}
              }
            }
          },
          "models": {
            "num_files": 25,
            "num_dirs": 0,
            "files": [
              "20250819-093501-tranquil-cue.tar.gz",
              "20250819-175616-coped-median.tar.gz",
              "20250819-212349-silent-papaya.tar.gz",
              "20250820-102603-charitable-brightness.tar.gz",
              "20250820-123433-progressive-vision.tar.gz",
              "20250821-145426-international-mayonnaise.tar.gz",
              "20250821-162308-energetic-shadow.tar.gz",
              "20250821-203215-blistering-grip.tar.gz",
              "20250822-152635-level-startup.tar.gz",
              "20250822-160110-cerulean-titanium.tar.gz",
              "20250825-094823-scared-pulsar.tar.gz",
              "20250825-130257-yellow-information.tar.gz",
              "20250826-202451-navy-contract.tar.gz",
              "20250826-210039-wood-assumption.tar.gz",
              "20250828-175426-inverted-equator.tar.gz",
              "20250828-211917-damp-sherry.tar.gz",
              "20250828-221000-hot-kite.tar.gz",
              "20250829-123630-acute-farad.tar.gz",
              "20250829-125958-one-cod.tar.gz",
              "20250829-133527-inventive-bosun.tar.gz",
              "20250901-113217-bent-stock.tar.gz",
              "20250901-115819-greasy-ketchup.tar.gz",
              "20250901-154151-bounded-cabin.tar.gz",
              "20250901-195342-light-sempre.tar.gz",
              "20250901-202958-wide-trainer.tar.gz"
            ],
            "dirs": {}
          }
        }
      },
      "context": {
        "num_files": 7,
        "num_dirs": 0,
        "files": [
          "context_config.yml",
          "entidades.yml",
          "examples.yml",
          "responses.yml",
          "segments.yml",
          "templates.yml",
          "training_limits.yml"
        ],
        "dirs": {}
      },
      "scripts": {
        "num_files": 4,
        "num_dirs": 0,
        "files": [
          "config_loader.py",
          "manage.py",
          "savecontext.py",
          "__init__.py"
        ],
        "dirs": {}
      }
    }
  },
  "poetry_dependencies": {
    "general": {
      "python": ">=3.9.0,<3.11",
      "make": "^0.1.6.post2",
      "packaging": ">=20.0,<21.0"
    },
    "groups": {
      "dev": {
        "tomli": "^2.2.1"
      },
      "bot": {
        "pandas": ">=1.5.3,<2.0.0",
        "transformers": ">=4.31.0,<4.34.0",
        "torch": ">=2.7.1,<3.0.0",
        "sentencepiece": ">=0.2.0,<0.3.0",
        "sacremoses": ">=0.1.1,<0.2.0",
        "unidecode": ">=1.4.0,<2.0.0",
        "rasa-sdk": "^3.6.1",
        "rasa": "^3.6.21",
        "fastapi": "^0.116.1",
        "uvicorn": "^0.35.0"
      },
      "actions": {
        "rasa-sdk": "^3.6.1",
        "rasa": "^3.6.21"
      }
    }
  },
  "docker_info": {
    "docker_compose": {
      "version": "3.9",
      "services": {
        "rasa": {
          "build": {
            "context": ".",
            "target": "rasa"
          },
          "container_name": "rasa_server",
          "volumes": [
            "./bot/data:/app/bot/data",
            "./bot/models:/app/bot/models"
          ],
          "ports": [
            "5005:5005"
          ],
          "depends_on": [
            "action_server"
          ]
        },
        "action_server": {
          "build": {
            "context": ".",
            "target": "actions"
          },
          "container_name": "rasa_actions",
          "volumes": [
            "./actions:/app/actions"
          ],
          "ports": [
            "5055:5055"
          ]
        },
        "trainer": {
          "build": {
            "context": ".",
            "target": "rasa"
          },
          "container_name": "rasa_trainer",
          "volumes": [
            "./bot/data:/app/bot/data",
            "./bot/models:/app/bot/models"
          ],
          "entrypoint": [
            "poetry",
            "run",
            "python",
            "entrenador/train.py"
          ]
        }
      }
    },
    "dockerfiles": {
      "Dockerfile": "# ----------------------\n# Etapa base\n# ----------------------\nFROM python:3.10-slim AS base\n\nWORKDIR /app\n\n# Evitar prompts y mejorar cacheo\nENV POETRY_VIRTUALENVS_CREATE=false \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    PIP_NO_CACHE_DIR=on\n\n# Instalar dependencias del sistema\nRUN apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*\n\n# Copiamos dependencias primero para aprovechar cache\nCOPY pyproject.toml poetry.lock ./\nRUN pip install --upgrade pip && pip install poetry\n\n\n# ----------------------\n# Etapa Bot (Rasa)\n# ----------------------\nFROM base AS rasa\nRUN poetry install --only bot --no-root --without dev\n\n# Clonamos solo la carpeta \"bot\"\nRUN git clone --depth 1 --filter=blob:none --sparse https://github.com/Ariel-Hab/Integhra-Pomp.ia.git /app/repo \\\n    && cd /app/repo && git sparse-checkout set bot\n\nWORKDIR /app/repo/bot\nCMD [\"poetry\", \"run\", \"rasa\", \"run\", \"--enable-api\", \"--cors\", \"*\"]\n\n\n# ----------------------\n# Etapa Actions\n# ----------------------\nFROM base AS actions\nRUN poetry install --only actions --no-root --without dev\n\n# Clonamos solo la carpeta \"actions\"\nRUN git clone --depth 1 --filter=blob:none --sparse https://github.com/Ariel-Hab/Integhra-Pomp.ia.git /app/repo \\\n    && cd /app/repo && git sparse-checkout set actions\n\nWORKDIR /app/repo/actions\nCMD [\"poetry\", \"run\", \"rasa\", \"run\", \"actions\"]\n"
    }
  },
  "manage_py": null,
  "scripts": {
    "config_loader.py": "import yaml\nfrom pathlib import Path\nfrom typing import Dict, Any, List\n\nclass ConfigLoader:\n    @staticmethod\n    def _load_yaml(path: Path) -> Dict[str, Any]:\n        \"\"\"Carga un YAML y devuelve un diccionario vacío si no existe.\"\"\"\n        if not path.exists():\n            return {}\n        with open(path, \"r\", encoding=\"utf-8\") as f:\n            return yaml.safe_load(f) or {}\n\n    @staticmethod\n    def cargar_config(\n        context_path=\"context/context_config.yml\",\n        ejemplos_path=\"context/examples.yml\",\n        templates_path=\"context/templates.yml\",\n        responses_path=\"context/responses.yml\",\n        segments_path=\"context/segments.yml\"  # NUEVO: soporte para segments\n    ) -> Dict[str, Any]:\n        \"\"\"Carga la configuración completa de intents, entidades, slots y responses.\"\"\"\n        base_path = Path(__file__).parent.parent\n        context_file = (base_path / context_path).resolve()\n        ejemplos_file = (base_path / ejemplos_path).resolve()\n        templates_file = (base_path / templates_path).resolve()\n        responses_file = (base_path / responses_path).resolve()\n        segments_file = (base_path / segments_path).resolve()  # NUEVO\n\n        # Verificar archivos requeridos\n        required_files = [context_file, ejemplos_file, templates_file, responses_file]\n        for f in required_files:\n            if not f.exists():\n                raise FileNotFoundError(f\"No se encontró el archivo: {f}\")\n\n        # Cargar todos los archivos\n        context_data = ConfigLoader._load_yaml(context_file)\n        ejemplos_data = ConfigLoader._load_yaml(ejemplos_file)\n        templates_data = ConfigLoader._load_yaml(templates_file)\n        responses_data = ConfigLoader._load_yaml(responses_file)\n        segments_data = ConfigLoader._load_yaml(segments_file)  # NUEVO\n\n        # Extraer configuraciones principales\n        intents_raw = context_data.get(\"intents\", {})\n        entities_config = context_data.get(\"entities\", {})\n        slots_config = context_data.get(\"slots\", {})\n        detection_patterns = context_data.get(\"detection_patterns\", {})\n        flow_groups = context_data.get(\"flow_groups\", {})\n        story_starters = context_data.get(\"story_starters\", [])\n        follow_up_only = context_data.get(\"follow_up_only\", [])\n        \n        # Configuraciones con defaults mejorados\n        context_validation = context_data.get(\"context_validation\", {})\n        context_validation.setdefault(\"enabled\", False)\n        context_validation.setdefault(\"action\", \"action_context_validator\")\n        context_validation.setdefault(\"max_switches\", 5)\n        \n        session_config = context_data.get(\"session_config\", {})\n        session_config.setdefault(\"session_expiration_time\", 180)\n        session_config.setdefault(\"carry_over_slots_to_new_session\", True)\n        \n        fallback = context_data.get(\"fallback\", {})\n        fallback.setdefault(\"action\", \"action_fallback\")\n        fallback.setdefault(\"response\", \"Perdón, no entendí lo que qui...",
    "manage.py": "#!/usr/bin/env python3\n\"\"\"\nGestor de tareas PompIA con menú interactivo y acceso rápido\n-----------------------------------------------------------\nUso:\n    python manage.py            # Muestra menú principal\n    python manage.py local      # Abre menú Bot Local\n    python manage.py docker     # Abre menú Docker\n    python manage.py deps       # Abre menú Dependencias\n    python manage.py clean      # Abre menú Limpieza\n    python manage.py snapshot   # Ejecuta snapshot directamente\n\"\"\"\n\nimport subprocess\nimport sys\nimport os\n\ntry:\n    sys.stdout.reconfigure(encoding=\"utf-8\")\nexcept Exception:\n    pass\n\ndef run(cmd, shell=False, cwd=None):\n    pretty_cmd = \" \".join(cmd) if isinstance(cmd, list) else cmd\n    print(f\"\\n⚙️  Ejecutando: {pretty_cmd} (cwd: {cwd or os.getcwd()})\\n\")\n    try:\n        subprocess.run(cmd, shell=shell, check=True, cwd=cwd)\n        print(\"✅ Comando ejecutado correctamente.\\n\")\n    except subprocess.CalledProcessError as e:\n        print(f\"❌ Error ejecutando: {pretty_cmd}\")\n        try:\n            if e.stdout:\n                print(e.stdout)\n            if e.stderr:\n                print(e.stderr)\n        except Exception:\n            pass\n        sys.exit(e.returncode)\n\n# --- Funciones Docker ---\ndef docker_up(): run([\"docker\", \"compose\", \"up\"])\ndef docker_build(): run([\"docker\", \"compose\", \"build\"])\ndef docker_restart(): run(\"docker compose down && docker compose up --build\", shell=True)\ndef docker_logs(): run([\"docker\", \"compose\", \"logs\", \"-f\"])\ndef docker_shell_rasa(): run([\"docker\", \"compose\", \"exec\", \"rasa\", \"bash\"])\ndef docker_run_agent(): run([\"docker\", \"compose\", \"up\", \"rasa\", \"actions\",\"--actions\",\"actions.actions\"])\ndef docker_train_container(): run([\"docker\", \"compose\", \"exec\", \"rasa\", \"rasa\", \"train\"])\n\n# --- Dependencias Contenedor ---\ndef update_deps_container_rasa(): run([\"docker\", \"compose\", \"exec\", \"rasa\", \"poetry\", \"install\", \"--no-root\", \"--only\", \"bot\", \"--without\", \"dev\"])\ndef update_deps_container_actions(): run([\"docker\", \"compose\", \"exec\", \"rasa_actions\", \"poetry\", \"install\", \"--no-root\", \"--only\", \"actions\", \"--without\", \"dev\"])\ndef update_deps_container_trainer(): run([\"docker\", \"compose\", \"exec\", \"rasa_trainer\", \"poetry\", \"install\", \"--no-root\", \"--only\", \"bot\", \"--without\", \"dev\"])\ndef update_deps_all_containers():\n    update_deps_container_rasa()\n    update_deps_container_actions()\n    update_deps_container_trainer()\n\n# --- Dependencias Local ---\ndef install_deps_bot_local(): run([\"poetry\", \"install\", \"--only\", \"bot\", \"--without\", \"dev\"])\ndef install_deps_actions_local(): run([\"poetry\", \"install\", \"--only\", \"actions\", \"--without\", \"dev\"])\n\n# --- Bot Local ---\ndef train_local_nlu():\n    install_deps_bot_local()\n    run([\"poetry\", \"run\", \"python\", \"entrenador/train.py\"], cwd=\"bot\")\ndef train_local():\n    install_deps_bot_local()\n    run([\"poetry\", \"run\", \"rasa\", \"train\"], cwd=\"bot\")\ndef run_bot_local():\n    install_deps_bot_local()\n    run([\"poetry\", \"run\", \"python\", \"main.py\"], cwd=\"bot\")\ndef r...",
    "savecontext.py": "import os\nimport json\nimport subprocess\nfrom pathlib import Path\nfrom datetime import datetime\nimport sys\nsys.stdout.reconfigure(encoding='utf-8')\nimport tomli\nimport yaml\n\n# --- Agrego imports para Rasa ---\nfrom rasa.core.agent import Agent\n\nBASE_DIR = Path.cwd()\nCONTEXT_FILE = BASE_DIR / \"project_context.json\"\n\n\ndef get_file_structure_summary(base_dir, max_depth=3):\n    \"\"\"Recorre la estructura de archivos hasta max_depth y devuelve un árbol resumido.\"\"\"\n    def helper(path, depth):\n        if depth > max_depth:\n            return {\"note\": \"max depth reached\"}\n        try:\n            files = [\n                f for f in os.listdir(path)\n                if os.path.isfile(os.path.join(path, f)) and not f.endswith('.pyc')\n            ]\n            dirs = [\n                d for d in os.listdir(path)\n                if os.path.isdir(os.path.join(path, d))\n                and d != '__pycache__'\n                and not d.startswith('.git')\n            ]\n            return {\n                \"num_files\": len(files),\n                \"num_dirs\": len(dirs),\n                \"files\": files,\n                \"dirs\": {d: helper(os.path.join(path, d), depth+1) for d in dirs}\n            }\n        except Exception:\n            return {\"error\": \"no access\"}\n    return helper(base_dir, 0)\n\n\ndef get_poetry_groups_dependencies(pyproject_path):\n    \"\"\"Lee las dependencias generales y por grupos desde pyproject.toml.\"\"\"\n    try:\n        with open(pyproject_path, \"rb\") as f:\n            data = tomli.load(f)\n        tool_poetry = data.get(\"tool\", {}).get(\"poetry\", {})\n        groups = tool_poetry.get(\"group\", {})\n\n        groups_deps = {\n            group_name: group_data.get(\"dependencies\", {})\n            for group_name, group_data in groups.items()\n        }\n        general_deps = tool_poetry.get(\"dependencies\", {})\n\n        return {\"general\": general_deps, \"groups\": groups_deps}\n    except Exception as e:\n        return {\"error\": f\"No se pudo leer pyproject.toml: {e}\"}\n\n\ndef read_file_if_exists(path, max_chars=3000):\n    \"\"\"Lee un archivo si existe, recortando a max_chars para evitar sobrecarga.\"\"\"\n    p = Path(path)\n    if p.exists():\n        text = p.read_text(encoding=\"utf-8\", errors=\"ignore\")\n        return text[:max_chars] + (\"...\" if len(text) > max_chars else \"\")\n    return None\n\n\ndef get_docker_info():\n    \"\"\"Extrae configuración de docker-compose.yml y Dockerfiles.\"\"\"\n    info = {}\n    docker_compose_path = BASE_DIR / \"docker-compose.yml\"\n    if docker_compose_path.exists():\n        try:\n            with open(docker_compose_path, \"r\", encoding=\"utf-8\") as f:\n                info[\"docker_compose\"] = yaml.safe_load(f)\n        except Exception as e:\n            info[\"docker_compose_error\"] = str(e)\n    # Buscar Dockerfiles\n    dockerfiles = list(BASE_DIR.glob(\"Dockerfile*\"))\n    dockerfile_contents = {}\n    for df in dockerfiles:\n        dockerfile_contents[df.name] = read_file_if_exists(df, max_chars=3000)\n    if dockerfile_contents:\n        info[\"dockerfile...",
    "__init__.py": ""
  },
  "readme_excerpt": "# 🤖 PompIA – Sistema de Asistente Virtual Inteligente\n\n**PompIA** es un sistema modular de asistente virtual construido con **Rasa** y **Python**, que permite la gestión, entrenamiento y ejecución de un bot conversacional inteligente. Está diseñado para ser escalable, mantenible y fácilmente desplegable mediante contenedores Docker.\n\n> 💡 Este repositorio central (`pomp.ia`) organiza y orquesta los distintos módulos (bot y actions), cada uno ejecutado en su propio contenedor.\n\n---\n\n## 🧱 Estructura del Proyecto\n\n```\npomp.ia/\n│\n│\n├── bot/                # Proyecto principal del chatbot\n│   ├── data/           # NLU y ejemplos de conversación\n│   ├── models/         # Modelos entrenados por Rasa\n│   ├── entrenador/     # Lógica de entrenamiento (opcional)\n│   ├── config.yml      # Configuración del pipeline de Rasa\n│   ├── domain.yml      # Intents, entidades, acciones, respuestas\n│   ├── endpoints.yml   # Configuración de endpoints\n│   ├── pyproject.toml  # Dependencias con Poetry\n│   └── poetry.lock\n│\n├── actions/            # Acciones personalizadas (custom actions)\n│   ├── actions.py      # Acciones en Python\n│   ├── pyproject.toml\n│   └── poetry.lock\n│\n├── docker-compose.yml  # Orquestación de servicios\n├── Dockerfile.rasa     # Imagen del servicio del bot\n├── Dockerfile.actions  # Imagen del servicio de acciones\n├── .dockerignore       # Archivos ignorados en el build\n└── README.md           # Este archivo ✨\n```\n\n---\n\n## 🚀 ¿Qué hace este proyecto?\n\n- 🧠 Usa **Rasa** para NLP/NLU: interpreta intenciones, entidades y contexto.\n- 🎯 Implementa **acciones personalizadas** para integrar lógica adicional en Python.\n- 🐳 Usa **Docker** para aislar los entornos de ejecución (bot y actions).\n- 🔁 Es **modular**, cada componente es autocontenible y fácil de mantener.\n- 🛠️ Puede entrenarse, probarse, actualizarse y desplegarse con un solo comando.\n\n---\n\n## ⚙️ Requisitos Previos\n\n- Docker + Docker Compose\n- Python 3.10+ (solo si corrés fuera de Docker)\n- [Poetry](https://python-p..."
}